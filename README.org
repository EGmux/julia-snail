* Julia Snail

Snail is a REPL interaction package for Julia in the spirit of Common Lisp's [[https://common-lisp.net/project/slime/][SLIME]] and Clojure's [[https://cider.mx][CIDER]].


** Features

- REPL display :: Snail currently uses [[https://github.com/neovim/libvterm][libvterm]] with [[https://github.com/akermu/emacs-libvterm][Emacs]] bindings to display Julia's native REPL in a good terminal, so it should have relatively good performance and fewer display bugs than attempting to run the REPL in a `term.el` buffer.
- Parser :: Snail contains a limited but serviceable Julia parser. See below for where it is used.
- Convenient REPL interaction :: Snail provides a bridge between Julia programs and a Julia process running in a REPL. ...


** Requirements

- Emacs 26.2 or later, compiled with module support (~--with-modules~)
- [[https://github.com/JuliaEditorSupport/julia-emacs][julia-mode]]
- [[https://github.com/akermu/emacs-libvterm][emacs-libvterm]]
- [[https://github.com/magnars/s.el][s.el]]
- [[https://github.com/Malabarba/spinner.el][spinner]]
- [[https://github.com/cute-jumper/parsec.el][parsec]]
- [[https://github.com/magnars/dash.el][dash]]

Julia versions 1.0 and 1.3 are supported.


** Future improvements

*** Structural

- The current parser leaves much to be desired. It is woefully incomplete: in particular, it cannot detect one-line top-level definitions (such as `f(x) = 10x`). In addition: it is slow, and not particularly straightforward in implementation. A rewrite would work better and enable more features. Unfortunately, parsers are hard. :)
- The libvterm dependency forces the use of very recent Emacs releases, and forces Emacs to be build with module support. It would be much better to re-implement the REPL in Elisp.


*** Features

- The autocompletion search does not include anything pulled into a module with ~using~. Julia does not seem to have a built-in incantation for doing this (~names~ with ~imported=true~ only includes /explicitly/ imported parameters). This can be worked around on the Snail side, by extending the parser to recognize ~using~ statements.
- Autocompletion does not pick up local variables. This is yet another weakness of the parser.
- A real eldoc implementation would be great, but difficult to do with Julia's generic functions. The parser would also have to improve (notice a theme here?).


** Usage

*** Installation

...


*** Configuration

...

include recommended ~display-buffer-alist~ tweaks


*** Basics

...


*** Multiple REPLs

To use multiple REPLs, set the local variables ~julia-snail-repl-buffer~ and ~julia-snail-port~. They must be distinct per-project. They can be set at the [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Specifying-File-Variables.html][file level]], or at the [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Directory-Variables.html][directory level]]. The latter approach is recommended, with the ~.dir-locals.el~ file at the root of a project directory.

For example, consider two projects: ~Mars~ and ~Venus~, both of which you wish to work on at the same time. They live in different directories.

The ~Mars~ project directory contains the following ~.dir-locals.el~ file:

#+BEGIN_SRC emacs-lisp
((julia-mode . ((julia-snail-port . 10050)
                (julia-snail-repl-buffer . "*julia Mars*"))))
#+END_SRC

The ~Venus~ project directory contains the following ~.dir-locals.el~ file:

#+BEGIN_SRC emacs-lisp
((julia-mode . ((julia-snail-port . 10060)
                (julia-snail-repl-buffer . "*julia Venus*"))))
#+END_SRC

(Be sure to refresh any buffers currently visiting files in ~Mars~ and ~Venus~ using ~find-alternate-file~ or similar.)

Now, source files in ~Mars~ will interact with the REPL running in the ~*julia Mars*~ buffer, and source files in ~Venus~ will interact with the REPL running in the ~*julia Venus*~ buffer.

The ~julia-snail-executable~ variable can be set the same way to run different versions of Julia.
